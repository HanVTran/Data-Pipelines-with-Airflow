https://sonra.io/2018/01/01/using-apache-airflow-to-build-a-data-pipeline-on-aws/
In this section we will cover:

Installation of Airflow
Defining a database connection using Airflow
Developing the parameterizable S3 to Redshift operator
Developing the re-usable Redshift Upsert operator
Deployment operations

==================================

http://dwgeek.com/run-redshift-sql-script-file-using-psql-variable-substitution.html/

Run Redshift SQL Script File using psql Variable Substitution

====================================

http://dwgeek.com/steps-connect-redshift-cluster-using-postgresql-psql.html/

Connect to Redshift cluster using PostgreSQL â€“ psql
To connect to Redshift from psql, you must specify the cluster endpoint (your cluster name), database, port and provide password at the run-time. At a command prompt, specify the connection information by using either command line parameters or a connection information string.

psql -h <endpoint> -U <userid> -d <databasename> -p <port>
Where:

<endpoint> It is nothing but Redshift cluster name.
<userid> is a user ID with permissions to connect to the cluster.
<databasename> is the Database name to which you want to connect.
<port> is port name. Default port is, 5439
Now, you are all set to connect to Redshift from psql. Go ahead and provide all require parameter values.
==============================================

https://airflow.apache.org/_modules/airflow/operators/postgres_operator.html

# -*- coding: utf-8 -*-
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
from airflow.hooks.postgres_hook import PostgresHook
from airflow.models import BaseOperator
from airflow.utils.decorators import apply_defaults


[docs]class PostgresOperator(BaseOperator):
    """
    Executes sql code in a specific Postgres database

    :param sql: the sql code to be executed. (templated)
    :type sql: Can receive a str representing a sql statement,
        a list of str (sql statements), or reference to a template file.
        Template reference are recognized by str ending in '.sql'
    :param postgres_conn_id: reference to a specific postgres database
    :type postgres_conn_id: str
    :param autocommit: if True, each command is automatically committed.
        (default value: False)
    :type autocommit: bool
    :param parameters: (optional) the parameters to render the SQL query with.
    :type parameters: mapping or iterable
    :param database: name of database which overwrite defined one in connection
    :type database: str
    """

[docs]    template_fields = ('sql',)

[docs]    template_ext = ('.sql',)

[docs]    ui_color = '#ededed'


    @apply_defaults
    def __init__(
            self, sql,
            postgres_conn_id='postgres_default', autocommit=False,
            parameters=None,
            database=None,
            *args, **kwargs):
        super(PostgresOperator, self).__init__(*args, **kwargs)
        self.sql = sql
        self.postgres_conn_id = postgres_conn_id
        self.autocommit = autocommit
        self.parameters = parameters
        self.database = database

[docs]    def execute(self, context):
        self.log.info('Executing: %s', self.sql)
        self.hook = PostgresHook(postgres_conn_id=self.postgres_conn_id,
                                 schema=self.database)
        self.hook.run(self.sql, self.autocommit, parameters=self.parameters)
        for output in self.hook.conn.notices:
            self.log.info(output)

